%% Design sizing software
clear all
close all
clc

%% Breguet Range Equation

% propeller efficiency
eta = 0.8;

% LD estimations
LD = [20:1:28]; % lb/hp/hr, numbers based on competitive assessment plot

% SFC estimation
SFC = [0.3:.0125:.4]; % from engine competitive assessment

% EWF estimation
EWF = [0.20:.01:.28];

% Payload weight requirement
W_pl = 600; % lbs

% Range requirement
R = 20650; % nm

% takeoff weight initial guess (approx voyager takeoff weight)
W_to_i = 10000; % lbs




%% Run function

[W_to, W_e, W_f] = sizing1(LD, SFC, EWF, W_pl, R);

for (i = 1:length(LD))
    for j = 1:length(SFC)
        for k = 1:length(EWF)
            [W_to(i,j,k), W_e(i,j,k), W_f(i,j,k)] = sizing1(LD(i), SFC(j), EWF(k), W_pl, R);
        end
    end
end

%% carpet plot

figure(1)

[X,Y] = meshgrid(LD,SFC);
offset = 25*0.4;
Z = reshape(W_to(:,:,5),[length(LD),length(SFC)]);
Z = Z';

h = carpet(X,Y,Z,offset,0,'r','b','LineWidth',2);
h = carpetlabel(X, Y, Z, offset, 0, -1, 1, 0, 0,'FontSize', 12);

carpettext(X,Y,Z, offset, 0, 0, "L/D", 1, -3);
carpettext(X,Y,Z, offset, 0, 0, "SFC", 3, 1);
ylim([0.2e4 2e4])
ylabel('MTOW')
grid minor

figure(2)

[X,Y] = meshgrid(LD,EWF);
offset =  20;
Z = reshape(W_to(:,5,:),[length(LD),length(EWF)]);
Z = Z';
h_p = carpet(X,Y,Z,offset,0,'#0B6623','b','LineWidth',2);
 % h = carpetlabel(X, Y, Z, offset, 0, -1, 1, 0, 0,'FontSize', 12);

carpettext(X,Y,Z, offset, 0, 0, "L/D", 1, 0);
carpettext(X,Y,Z, offset, 0, 0, "EWF", 3, 1);
xlim([23 34])
ylim([0.2e4 2e4])
ylabel('MTOW')
grid minor


figure(3)
[X,Y] = meshgrid(SFC,EWF);
offset = SFC(4)*EWF(4);
Z = reshape(W_to(4,:,:),[length(SFC),length(EWF)]);
Z = Z';
h_p = carpet(X,Y,Z,offset,0,'#0B6623','r','LineWidth',2);

%h = carpetlabel(X, Y, Z, offset, 0, -1, 1, 0, 0,'FontSize', 12);

carpettext(X,Y,Z, offset, 0, 0, "SFC", 0, 0);
carpettext(X,Y,Z, offset, 0, 0, "EWF", 0, 0);
xlim([.31 .42])
ylim([0.2e4 2e4])
ylabel('MTOW')
grid minor


%% Carpet Function
function h = carpet(x1, x2, y, offset, nref, linspec1, linspec2, varargin)
%CARPET Plots a carpet plot with two independent and one dependent variable.
%   h = carpet(x1, x2, y, offset) generates a carpet plot with
%   independent variables x1 & x2 and dependent variable y.  The plot is
%   created using a cheater axis generated by the equation:
%
%   xcheat = x1 + x2 * offset.
%
%   x1 & x2 may be vectors, or they may be matrices as generated by
%   MESHGRID.  x1, x2, & y should be arranged such that they could be
%   plotted with SURF(x1,x2,y).
%
%   Handles to the resulting carpet plot curves are returned in h.
%
%   Setting nonzero nref will cause lines in the carpet plot to be skipped.
%   This can be used to create smooth curves in the carpet plot without
%   excess clutter.  Default nref = 0.  The same value of nref is applied
%   to both x1 and x2 directions.  Refined vectors can be created using
%   REFVEC.
%
%   linspec1 specifies the line style for the x1=constant lines.  If it is
%   not specified, it defaults to 'k'.
%
%   linspec2 specifies the line style for the x2=constant lines.  If it is
%   not specified, it defaults to linspec1.
%
%   Any additional arguments passed to CARPET are passed to the plot
%   command.
%
%   See also CARPETCONVERT, CARPETCONTOURCONVERT, REFVEC.
%   Rob McDonald
%   ramcdona@calpoly.edu
%   19 February 2013 v. 1.0\

if( nargin < 5 )
    nref = 0;
end
% Handle default line styles.
if( nargin < 6 )
    linspec1 = 'k';
end
if( nargin < 7 )
    linspec2 = linspec1;
end
% If input is not matrix similar to meshgrid, make it so.
if( isvector(x1) && isvector(x2) )
    [X1,X2] = meshgrid( x1, x2 );
else
    X1 = x1;
    X2 = x2;
end
% Calculate the cheater axis.
Xcheat = X1 + X2 * offset;
% Plot the carpet plot lines.
h = figure();
hold on
plot(Xcheat(1:nref+1:end,:)', y(1:nref+1:end,:)',...
    varargin{:}, Color=linspec1)
plot(Xcheat(:,1:nref+1:end), y(:,1:nref+1:end), ...
    varargin{:}, Color=linspec2);
% Hide the X-axis and turn off the box.
ca = gca;
set(ca,'XTick',[])
box off
set(ca,'XColor',[1,1,1])
end

function h = carpetlabel(x1, x2, y, offset, nref, x1flag, x2flag, xoff, yoff, varargin)
%CARPETLABEL Labels carpet plot axes.
%   h = carpetlabel(x1, x2, y, offset, nref) Prints labels on a carpet
%   plot grid.  The carpet plot coordinates are defined by
%   (x1, x2, y, offset) as described in CARPET.  nref specifies the number
%   of labels to skip, typically the same value as used with CARPET is
%   used.
%
%   h = carpetlabel(x1, x2, y, offset, nref, xflag, yflag)
%   x1flag controls which (-1 min, 0 none, 1 max) extent of the x2 domain
%   the x1 labels are printed.  Default is 1.
%
%   x2flag controls which (-1 min, 0 none, 1 max) extent of the x1 domain
%   the x2 labels are printed.  Default is 1.
%
%   h = carpetlabel(x1, x2, y, offset, nref, xflag, yflag, xoff, yoff)
%   xoff and yoff specify x & y offsets (in carpet plot coordinates) for
%   the text labels.  Default offsets are 0.0.
%
%   Any additional parameters are passed to the TEXT command.
%
%   See also CARPET, CARPETTEXT, CARPETCONVERT, TEXT.
%   Rob McDonald
%   ramcdona@calpoly.edu
%   19 February 2013 v. 1.0
if( nargin < 6 )
    x1flag = 1;
end
if( nargin < 7 )
    x2flag = 1;
end
if( nargin < 8 )
    xoff = 0;
end
if( nargin < 9 )
    yoff = 0;
end
h=[];
if(x1flag ~= 0)
    if(x1flag < 0)
        x2l = x2(1);
    else
        x2l = x2(end);
    end
    for xl1 = x1(1:nref+1:end)
        h = [h carpettext(x1, x2, y, offset, xl1, x2l, num2str(xl1), xoff, yoff, varargin{:})];
    end
end
if(x2flag ~= 0)
    if(x2flag < 0)
        x1l = x1(1);
    else
        x1l = x1(end);
    end
    
    for xl2 = x2(1:nref+1:end)
        h = [h carpettext(x1, x2, y, offset, x1l, xl2, num2str(xl2), xoff, yoff, varargin{:})];
    end
end
end
function h=carpettext(x1, x2, y, offset, x1p, x2p, str, xoff, yoff, varargin)
%CARPETTEXT Prints text on carpet plot axes.
%   h = carpettext(x1, x2, y, offset, x1p, x2p, str) Prints text
%   on a carpet plot grid.  The carpet plot coordinates are defined by
%   (x1, x2, y, offset) as described in CARPET.  x1p, x2p specify the text
%   location in dependent variable coordinates.  str specifies the string
%   to print.
%
%   h = carpettext(x1, x2, y, offset, x1p, x2p, str, xoff, yoff)
%   xoff and yoff specify x & y offsets (in carpet plot coordinates) for
%   the text labels.  Default offsets are 0.0.
%
%   Any additional parameters are passed to the TEXT command.
%
%   See also CARPET, CARPETLABEL, CARPETCONVERT, TEXT.
%   Rob McDonald
%   ramcdona@calpoly.edu
%   19 February 2013 v. 1.0
% Handle default offset values.
if( nargin < 8 )
    xoff = 0;
end
if( nargin < 9 )
    yoff = 0;
end
% Convert coordinates to carpet plot coordinates.
[xc, yc] = carpetconvert( x1, x2, y, offset, x1p, x2p );
% Plot text in carpet plot coordinates.
h = text( xc + xoff, yc + yoff, str, varargin{:} );
end
function [xc, yc]=carpetconvert(x1, x2, y, offset, x1p, x2p)
%CARPETCONVERT Converts points into carpet plot coordinates.
%   [xc, yc]=carpetconvert(x1, x2, y, offset, x1p, x2p) converts the points
%   x1p, x2p into carpet plot coordinates defined by (x1, x2, y, offset)
%   as described in CARPET.
%
%   The converted points are returned in [xc, yc].
%
%   See also CARPET.
%   Rob McDonald 
%   ramcdona@calpoly.edu  
%   19 February 2013 v. 1.0
% Calculate carpet plot cheater axis
xc = x1p + x2p * offset; 
  
% Interpolate contours to carpet plot y-axis
yc = interp2(x1,x2,y,x1p,x2p);
end

function [W_to, W_e, W_f] = sizing1(LD, SFC, EWF, W_pl, R)
% INPUTS:
% LD - L/D, lift to drag ratio
% SFC - power specific fuel consumption [
% EWF - empty weight fraction [W_e/W_to]
% W_pl - payload weight [lbs]
% R - Range [nm]

% OUTPUTS:
% W_to - takeoff weight [lbs]
% W_e - empty weight [lbs]
% W_f - fuel weight [lbs]

W_to = 10000;
error = 10;

while (abs(error) >= 1)
    W_e = EWF .* W_to;
    W_f_1 = W_to - W_e - W_pl;
    W_f_2 = W_to - (W_to ./ (exp((R .* 6076.12) .* (SFC / 550 / 3600) ./ (.8 * LD))));
    error = W_f_1 - W_f_2;
    W_to = W_to - error;
end

W_f = W_to - W_pl - W_e;

end